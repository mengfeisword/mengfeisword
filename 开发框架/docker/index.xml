<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on DocDock Documentation</title>
    <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/</link>
    <description>Recent content in docker on DocDock Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>compose命令详解</title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/compose%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/compose%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
      <description> build(构建yml中某个服务的镜像) 如上，web这个服务是依赖于镜像build的。在本地 也存在Dockerfile文件。 可以使用docker-compose build来构建服务的镜像。 ps(查看已经启动的服务状态） kill(停止某个服务） logs(可以查看某个服务的log） port(打印绑定的public port） pull(pull服务镜像) up(启动yml定义的所有服务） stop(停止yml中定义的所有服务） start(启动被停止的yml中的所有服务） kill(强行停止yml中定义的所有服务） rm（删除yml中定义的所有服务） restart(重启yml中定义的所有服务） scale(扩展某个服务的个数，可以向上或向下） migrate-to-labels(这个没有实际尝试。根据介绍是将服务从1.2迁移到1.3带labels的版本。docker之前不支持label） version（查看compose的版本） </description>
    </item>
    
    <item>
      <title>docker save与docker export的区别</title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/docker-save%E4%B8%8Edocker-export%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/docker-save%E4%B8%8Edocker-export%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>docker save与docker export的区别 一.docker save 1.docker save是用来将一个或多个image打包保存的工具。 docker save -o images.tar postgres:9.6 mongo:3.4
2.docker save如果指定的是container，docker save将保存的是容器背后的image。 docker save -o b.tar postgres
3.将打包后的镜像载入进来使用docker load docker load -i images.tar
4.docker save的应用场景是,如果你的应用是使用docker-compose.yml编排的多个镜像组合,但你要部署的客户服务器并不能连外网.这时,你可以使用docker save将用到的镜像打个包,然后拷贝到客户服务器上使用docker load载入.
二.docker export 1.docker export是用来将container的文件系统进行打包的 docker export需要指定container，不能像docker save那样指定image或container都可以。 docker export -o postgres-export.tar postgres
2.将打包的container载入进来使用docker import docker import将container导入后会成为一个image，而不是恢复为一个container。 docker import postgres-export.tar postgres:latest
另外一点是，docker import可以指定IMAGE[:TAG]，说明我们可以为镜像指定新名称。如果本地镜像库中已经存在同名的镜像，则原有镜像的名称将会被剥夺，赋给新的镜像。原有镜像将成为孤魂野鬼，只能通过IMAGE ID进行操作。
docker export的应用场景主要用来制作基础镜像，比如你从一个ubuntu镜像启动一个容器，然后安装一些软件和进行一些设置后，使用docker export保存为一个基础镜像。然后，把这个镜像分发给其他人使用，比如作为基础的开发环境。
三.docker save和docker export的区别 1.docker save保存的是镜像（image），docker export保存的是容器（container）； 2.docker load用来载入镜像包，docker import用来载入容器包，但两者都会恢复为镜像； 3.docker load不能对载入的镜像重命名，而docker import可以为镜像指定新名称。 </description>
    </item>
    
    <item>
      <title>参考文档</title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</guid>
      <description>参考文档 docker中文 kubernetes kubernetes编排器 kubernetes中文文档 Portainer Portainer 轻量级的 Docker 管理 UI Portainer安装，设置等 docker可视化管理——Portainer安装教程 Docker安装 Mac平台上Docker安装与使用
mac安装docker图形界面
docker的etcd3的搭建</description>
    </item>
    
    <item>
      <title></title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/%E8%B5%84%E6%96%99/dockermssql/create_qpsqldbbase/%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/%E8%B5%84%E6%96%99/dockermssql/create_qpsqldbbase/%E8%AF%B4%E6%98%8E/</guid>
      <description>Docker for Windows 使用 VMware WorkStation
登录dev实例 docker-machine ssh dev
查看容器 docker ps
创建快照 docker commit -p e5a5689d08ac qpsqldbbase-backup
查看镜像 docker images
保存镜像 docker save -o qpsqldbbase-backup.tar qpsqldbbase-backup
恢复镜像 docker load -i qpsqldbbase-backup.tar
netstat -aon|findstr &amp;ldquo;2048&amp;rdquo;
$ docker ps // 查看所有正在运行容器 $ docker stop containerId // containerId 是容器的ID
$ docker ps -a // 查看所有容器 $ docker ps -a -q // 查看所有容器ID
$ docker stop $(docker ps -a -q) // stop停止所有容器 $ docker rm $(docker ps -a -q) // remove删除所有容器</description>
    </item>
    
    <item>
      <title></title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/%E8%B5%84%E6%96%99/docker%E7%9A%84etcd3%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/docker/%E8%B5%84%E6%96%99/docker%E7%9A%84etcd3%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
      <description>docker的etcd3的搭建</description>
    </item>
    
  </channel>
</rss>
