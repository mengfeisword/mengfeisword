<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on DocDock Documentation</title>
    <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/</link>
    <description>Recent content in k8s on DocDock Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s</title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/k8s/</guid>
      <description>k8s k8s 简介 Kubernetes Pod概述 K8s 学习者绝对不能错过的最全知识图谱（内含 58个知识点链接）
1.master(控制系统) etcd: k-v 数据库（用于配置共享和服务发现） 只与 apiserver 通信 scheduler: 调度 简单点说就是给一个 pod 找一个 node(合理的平衡) controller manager: 核心，负责将现在的状态调整为 etcd 上应该的状态，包含了所有的实现逻辑 apiserver: 可以理解为 etcd 的前置过滤器（理解为中心处理器，分发到各个连接的模块）
2.node(s) kubelet: 负责和 master 连接，注册 node, listen-watch 本 node 的任务等 kube-proxy: 用于 k8s service 对象。在 K8s 集群中微服务的负载均衡是由 Kube-proxy 实现的，它是 K8s 集群内部的负载均衡器，也是一个分布式代理服务器，在 K8s 的每个节点上都有一个，这一设计体现了它的伸缩性优势，需要访问服务的节点越多，提供负载均衡能力的 Kube-proxy 就越多，高可用节点也随之增多。 容器运行时: 除了 docker k8s 还支持 rkt 等容器实现
负责为 pod 提供代理。它会定期从 etcd 获取所有的 service，并根据 service 信息创建代理。</description>
    </item>
    
    <item>
      <title>k8s常见面试题</title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/k8s%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/k8s%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>k8s常见面试题 如何在 Kubernetes 中实现负载均衡？ 在生产中，你如何实现 Kubernetes 自动化？ 你如何扩展 Kubernetes 集群？ 你能解释 Deployment、ReplicaSets、StatefulSets、Pod、CronJob 的不同用途吗？ Kubernetes 如何处理持久性？ 服务和 ingress 的作用是什么？ 你何时会使用像 ConfigMap 或 secret 这样的东西？ Pod 亲和性作用是什么？ 你能举例说明何时使用 Init Container 么？ 什么是 sidecar 容器？你能给出一个用例，说明你为什么要使用它么？ 在构建和管理生产集群时遇到的主要问题是什么？ 为什么你会建议公司在云中构建自己的 K8S 集群而不是使用托管服务？ 什么是 Istio 和 Linkerd？ 什么是 Kubernetes Operator？ kubernetes包含几个组件。 各个组件的功能是什么。组件之间是如何交互的。 k8s的pause容器有什么用。是否可以去掉。 k8s中的pod内几个容器之间的关系是什么。 一个经典pod的完整生命周期。 k8s的service和ep是如何关联和相互影响的。 详述kube-proxy原理, -个请求是如何经过层层转发落到某个pod.上的整个过程。请求可能来自pod也可能来自外部。 rc/rs功能是怎么实现的。详述从API接收到-一个创建rc/rs的请求,到最终在节点上创建pod的全过程,尽可能详细。另外,当-个pod失效时，kubernetes是如何发现并重启另一个pod的? deployment/rs有什么区别。 其使用方式使用条件和原理是什么。 cgroup中的cpu有哪几种限制方式。 k8s是如何使用实现request和limit的。</description>
    </item>
    
    <item>
      <title>k8s简介</title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/k8s%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/k8s%E7%AE%80%E4%BB%8B/</guid>
      <description>一..k8s是什么，我们为啥要用 容器管理系统，提供部署，管理，扩展等机制，管理容器夸机器的应用 主要功能： 1.使用docker对应用包装，实例化，运行 2.以集群方式运行，管理跨机器的容器 3.解决docker跨机器容器之间的通讯问题 4.kubernetes的自我修复机制使得容器集群重视运行在用户期望的状态
为什么使用： 1.开发人员各司其职，轻装上整 2.全面拥抱微服务框架 3.使用kubernetes系统可以随时整体迁移 4.kubernetes系统具备超强的横向扩展功能
二，基本概念 1.功能组件 master apiserver：供 HTTP Rest 接口的关键服务程序，kubernets里所有资源增、删、改、查等操作的唯一入口，也是集群控制的入口进程 scheduler（调度）：资源调度(pod)的进程 controller-manager：负责管理各种控制，所有资源对象的自动化控制中心（资源对象的大总管） etcd：k-v数据库。所有资源对象全部保存在这里,支持服务与发现
node kebulet： pod对应容器的创建、暂停等任务 proxy：负责为pod提供代理。它会定期从etcd获取所有的service，并根据service信息创建代理。。k8s service 的通信与负载均衡机制的重要组件（主要对外支持的） docker：本机容器的管理与创建
2.操作对象 1.pod 最小部署单元，包含一个或多个容器，连接在一起的容器共享volue和网络，由kubernetes统一创建，调度，管理。可以直接创建，但是推荐使用rc 2.service pod的访问代理抽象 抽象服务出口，基础版本的负载均衡 3.replication controllers 管理pods的生命周期确保指定数量的pods会一直运行，实现资源收缩 一共4点
总体结构 1.master组件 apiserver： etcd：k-v数据库,系统的所有资源对象都保存在这里。支持服务注册与服务发现,微服务中常用的组件 scheduler（调度）：集群资源调度，分配pod的创建 controller-manager：管理rc，EndPointControl等各种控制器
2.node组件 kublet.负责管控docker容器,如，启动，停止等 proxy：负责为pod提供代理。定期从etcd获取service，并根据serveice创建代理
公共组件 etcd： flannel：网络协议</description>
    </item>
    
    <item>
      <title></title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/</guid>
      <description>服务与发现技术 etcd:注册发现 内部有事务和监听机制 分组 zookeeper consul eureka</description>
    </item>
    
    <item>
      <title></title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</guid>
      <description>#文档参考 Kubernetes中文社区 | 中文文档 十分钟带你理解Kubernetes核心概念 k8s资料 Kubernetes 介绍
#思维导图 k8s思维导图 男孩周末班-k8s-思维导图</description>
    </item>
    
    <item>
      <title></title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/%E5%8F%91%E5%B8%83%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/%E5%8F%91%E5%B8%83%E6%9C%8D%E5%8A%A1/</guid>
      <description>kubernetes核心组件kube-proxy - 运维笔记
在 K8s 集群中微服务的负载均衡是由 Kube-proxy 实现的，它是 K8s 集群内部的负载均衡器，也是一个分布式代理服务器，在 K8s 的每个节点上都有一个，这一设计体现了它的伸缩性优势，需要访问服务的节点越多，提供负载均衡能力的 Kube-proxy 就越多，高可用节点也随之增多。</description>
    </item>
    
    <item>
      <title></title>
      <link>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/%E7%94%A8%E9%80%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/k8s/%E7%94%A8%E9%80%94/</guid>
      <description>1.你能解释 Deployment、ReplicaSets、StatefulSets、Pod、CronJob 的不同用途吗？ Deployment:开发更新 ReplicaSets:集合控制 StatefulSets:状态集合 Pod:虚拟的实体 CronJob:运行自动化 2.Kubernetes 如何处理持久性？ 服务和 ingress 的作用是什么？ 你何时会使用像 ConfigMap 或 secret 这样的东西？ Pod 亲和性作用是什么？ 你能举例说明何时使用 Init Container 么？ 什么是 sidecar 容器？你能给出一个用例，说明你为什么要使用它么？
https://jimmysong.io/kubernetes-handbook/practice/service-discovery-and-loadbalancing.html</description>
    </item>
    
  </channel>
</rss>
